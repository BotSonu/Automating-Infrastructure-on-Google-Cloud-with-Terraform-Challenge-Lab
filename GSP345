                  <<<------------------------------------------Run the below commands in Cloud shell--------------------------------------------->>>
 
 
 
VAR1=bucket_name
 
VAR2=instance_name
 
VAR3=vpc_name
 
 
DMNAME=$(gcloud deployment-manager deployments list --filter=qldm --format="value('name')")
 
BUCKET_NAME=$(gcloud deployment-manager deployments describe $DMNAME --format=json | jq -r ".outputs |  map(select(.name | contains(\"${VAR1}\") )) | .[].finalValue")
 
INSTANCE_NAME=$(gcloud deployment-manager deployments describe $DMNAME --format=json | jq -r ".outputs |  map(select(.name | contains(\"${VAR2}\") )) | .[].finalValue")
 
VPC_NAME=$(gcloud deployment-manager deployments describe $DMNAME --format=json | jq -r ".outputs |  map(select(.name | contains(\"${VAR3}\") )) | .[].finalValue")
 
echo BUCKET_NAME:  $BUCKET_NAME
 
echo INSTANCE_NAME:  $INSTANCE_NAME
 
echo VPC_NAME: $VPC_NAME


 
### Step 1 ###
 
touch main.tf
touch variables.tf
mkdir -p modules/instances
touch modules/instances/instances.tf
touch modules/instances/outputs.tf
touch modules/instances/variables.tf
mkdir -p modules/storage
touch modules/storage/storage.tf
touch modules/storage/outputs.tf
touch modules/storage/variables.tf
 
 
       *********** Make sure to replace the <dynamic variable> with the zone assigned to you in the cloud shell *************
                                 [  ALSO REPLACE THE "REGION"  WITH THE REGION ASSIGNED TO YOU :)  ]
 
1.	 
 
cat > variables.tf <<EOL
variable "region" {
default = "us-east1"
}
 
variable "zone" {
default = "<dynamic variable>"
}
 
variable "project_id" {
default = "${DEVSHELL_PROJECT_ID}"
}
EOL
 
2.	 
 
cat > modules/instances/variables.tf <<EOL
variable "region" {
default = "us-east1"
}
 
variable "zone" {
default = "<dynamic variable>"
}
 
variable "project_id" {
default = "${DEVSHELL_PROJECT_ID}"
}
EOL
 
3.	 
 
cat > modules/storage/variables.tf <<EOL
variable "region" {
default = "us-east1"
}
 
variable "zone" {
default = "<dynamic variable>"
}
 
variable "project_id" {
default = "${DEVSHELL_PROJECT_ID}"
}
EOL
 
4.	 
 
cat > main.tf << EOL
terraform {
required_providers {
google = {
 source = "hashicorp/google"
 version = "3.55.0"
}
}
}
 
provider "google" {
project     = var.project_id
region      = var.region
zone        = var.zone
}
 
module "instances" {
source     = "./modules/instances"
}
EOL
 
5.	 
 
terraform init
 
6.	 
 
cat > modules/instances/instances.tf << EOL
resource "google_compute_instance" "tf-instance-1" {
name         = "tf-instance-1"
machine_type = "n1-standard-1"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
 
resource "google_compute_instance" "tf-instance-2" {
name         = "tf-instance-2"
machine_type = "n1-standard-1"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
EOL
 
7.	 
 
 
INSTANCE1_ID=$(gcloud compute instances describe tf-instance-1 --zone <dynamic variable> --format="json(id)" | jq -r .id)
 
echo $INSTANCE1_ID
 
INSTANCE2_ID=$(gcloud compute instances describe tf-instance-2 --zone <dynamic variable> --format="json(id)" | jq -r .id)
 
echo $INSTANCE2_ID
 
terraform import module.instances.google_compute_instance.tf-instance-1 $INSTANCE1_ID
terraform import module.instances.google_compute_instance.tf-instance-2 $INSTANCE2_ID
 
terraform plan
terraform apply -auto-approve



 
### Step 2 ###
 
1.	 
 
cat > modules/storage/storage.tf << EOL
resource "google_storage_bucket" "storage-bucket" {
name          = "${BUCKET_NAME}"
location      = "US"
force_destroy = true
uniform_bucket_level_access = true
}
EOL
 
cat << EOF >> main.tf
module "storage" {
source     = "./modules/storage"
}
EOF
 
2.	 
terraform init
terraform apply -auto-approve
 
3.	 
 
cat > main.tf << EOL
terraform {
backend "gcs" {
bucket  = "${BUCKET_NAME}"
prefix  = "terraform/state"
}
required_providers {
google = {
 source = "hashicorp/google"
 version = "3.55.0"
}
}
}
provider "google" {
project     = var.project_id
region      = var.region
zone        = var.zone
}
 
module "instances" {
source     = "./modules/instances"
}
module "storage" {
source     = "./modules/storage"
}
EOL
 
4.	 
 
terraform init
 
 
 
 
### Step 3 ###
 
1.	 
 
cat > modules/instances/instances.tf << EOL
resource "google_compute_instance" "tf-instance-1" {
name         = "tf-instance-1"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
 
resource "google_compute_instance" "tf-instance-2" {
name         = "tf-instance-2"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
 
resource "google_compute_instance" "${INSTANCE_NAME}" {
name         = "${INSTANCE_NAME}"
machine_type = "n1-standard-2"
zone         = var.zone
allow_stopping_for_update = true
 
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
EOL
 
2.	 
 
terraform init
terraform apply -auto-approve
 
 
 
### Step 4 ###
 
terraform taint module.instances.google_compute_instance.$INSTANCE_NAME
 
terraform plan
terraform apply -auto-approve
 
1.	 
 
cat > modules/instances/instances.tf << EOL
resource "google_compute_instance" "tf-instance-1" {
name         = "tf-instance-1"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
 
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
 
resource "google_compute_instance" "tf-instance-2" {
name         = "tf-instance-2"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
 
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "default"
}
}
EOL
 
2.	 
terraform apply -auto-approve


 
### Step 5 ###
 
1.	 
 
cat << EOF >> main.tf
module "vpc" {
source  = "terraform-google-modules/network/google"
version = "3.4.0"
 
project_id   = var.project_id
network_name = "${VPC_NAME}"
routing_mode = "GLOBAL"
 
subnets = [
   {
       subnet_name           = "subnet-01"
       subnet_ip             = "10.10.10.0/24"
       subnet_region         = "us-east1"
   },
   {
       subnet_name           = "subnet-02"
       subnet_ip             = "10.10.20.0/24"
       subnet_region         = "us-east1"
       subnet_private_access = "true"
       subnet_flow_logs      = "true"
       description           = "This subnet has a description"
   }
]
}
EOF
 
2.	 
terraform init
terraform apply -auto-approve
 
3.	 
cat > modules/instances/instances.tf << EOL
resource "google_compute_instance" "tf-instance-1" {
name         = "tf-instance-1"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
 
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "${VPC_NAME}"
subnetwork = "subnet-01"
}
}
 
resource "google_compute_instance" "tf-instance-2" {
name         = "tf-instance-2"
machine_type = "n1-standard-2"
zone         = var.zone
metadata_startup_script = <<-EOT
   #!/bin/bash
EOT
allow_stopping_for_update = true
 
boot_disk {
initialize_params {
 image = "debian-cloud/debian-10"
}
}
 
network_interface {
network = "${VPC_NAME}"
subnetwork = "subnet-02"
}
}
EOL
 
4.	 
terraform init
terraform apply -auto-approve


 
### Step 6 ###
 
1.
 
cat << EOF >> main.tf
resource "google_compute_firewall" "tf-firewall" {
name    = "tf-firewall"
network = "projects/${DEVSHELL_PROJECT_ID}/global/networks/${VPC_NAME}"
 
allow {
protocol = "tcp"
ports    = ["80"]
}
 
source_tags = ["web"]
source_ranges = ["0.0.0.0/0"]
}
EOF
 
2.
 
terraform init
terraform apply -auto-approve



                                                            Hope this helps you !!
                                                    _____________________________________
                                                        
                                                        
                                                        
                                                        
